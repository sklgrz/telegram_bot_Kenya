from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
from aiogram import types, Dispatcher
from create_bot import dp, bot, genius, weather_key
from keyboards import kb_client
from data_base import answers
from aiohttp import ClientSession

#import requests
from random import choice, seed, shuffle


class FSMSoviet(StatesGroup):
	soviet = State()

class FSMusic(StatesGroup):
	artist = State()
	song = State()  

class FSMPassword(StatesGroup):
	input_seed = State()
	input_number = State()

async def commands_start(message : types.Message):
	try:
		await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n–Ø - –ö–µ–Ω—è. –ù–∞–¥–µ—é—Å—å —è —Å—Ç–∞–Ω—É –¥–ª—è —Ç–µ–±—è —Ö–æ—Ä–æ—à–∏–º –¥—Ä—É–≥–æ–º. –î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º?)',\
			reply_markup=kb_client)
		await message.delete()
	except:
		await message.reply("–û–±—â–µ–Ω–∏–µ —Å –ö–µ–Ω–µ–π —á–µ—Ä–µ–∑ –õ–°, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É: \nhttp://t.me/KenyaTyanBot")

async def find_recommendation(message : types.Message):
	await bot.send_message(message.from_user.id, answers.select_ask(), reply_markup=ReplyKeyboardRemove())
	await FSMSoviet.soviet.set()

async def make_a_recommendation(message : types.Message, state : FSMContext):
	await bot.send_message(message.from_user.id, answers.select_soviet(), reply_markup=kb_client)
	await state.finish()


async def find_music_start(message : types.Message):
	await bot.send_message(message.from_user.id, '–ß—å—é –ø–µ—Å–Ω—é –∏—â–µ–º?', reply_markup=ReplyKeyboardRemove())
	await FSMusic.artist.set()

async def find_music_artist(message : types.Message, state : FSMContext):
	async with state.proxy() as data:
		data['artist'] = message.text
	await FSMusic.next()
	await bot.send_message(message.from_user.id, '–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏?')

async def find_music_song(message : types.Message, state : FSMContext):
	async with state.proxy() as data:
		data['song'] = message.text
	try:
		lyrics = genius.search_song(data['song'], data['artist']).lyrics
		lyrics = lyrics[lyrics.find(']') + 2:]

		while len(lyrics) > 4096:
			mes = lyrics[:4096].rfind('\n') 
			await bot.send_message(message.from_user.id, lyrics[:mes])
			lyrics = lyrics[mes:]

		if 'Embed' in lyrics:
			lyrics = lyrics[:lyrics.rfind('Embed')]

		await state.finish()
		await bot.send_message(message.from_user.id, lyrics, reply_markup=kb_client)
	
	except:
		await bot.send_message(message.from_user.id, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª', reply_markup=kb_client)
		await state.finish()

async def check_weather(message : types.Message):
	try:
	#	city = requests.get('https://ipinfo.io/json').json()['city']
		async with ClientSession() as session:
			
			url = "https://ipinfo.io/json"
			async with session.get(url=url) as responce:
				city = await responce.json()
				city = city['city']

			url = 'https://api.openweathermap.org/data/2.5/weather'
			params = {
			'q' : city,
			'appid' : weather_key,
			'units' : 'metric',
			'lang' : 'ru'
			}
			async with session.get(url=url, params=params) as responce:
				wea = await responce.json()

		smile = {
		'—è—Å–Ω–æ' : "‚òÄÔ∏è",
		'–æ–±–ª–∞—á–Ω–æ' : "üå§",
		'–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏' : "‚òÅÔ∏è",
		'–¥–æ–∂–¥—å' : "üåß",
		'–ø–∞—Å–º—É—Ä–Ω–æ' : "‚òÅÔ∏è",
		'—Å–Ω–µ–≥' : 'üå®'
		}

		answer = f"–ü–æ–≥–æ–¥–∞ - {wea['name']}:\n{wea['weather'][0]['description'].capitalize()}, "
		answer += f"{smile.get(wea['weather'][0]['description'], '')}"
		answer += f"\n{wea['main']['temp']} ¬∞C; –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {wea['main']['feels_like']} ¬∞C."
		answer += f"\n–í–µ—Ç–µ—Ä: {wea['wind']['speed']} –º/—Å."

		await bot.send_message(message.from_user.id, answer)
	except:
		await bot.send_message(message.from_user.id, "–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ")

async def take_password_start(message : types.Message):

    await bot.send_message(message.from_user.id, "–û–∂–∏–¥–∞—é –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ...", reply_markup=ReplyKeyboardRemove())
    await FSMPassword.input_seed.set()


async def take_password_seed(message : types.Message, state : FSMContext):
	async with state.proxy() as data:
		data['seed'] = message.text
		data['number'] = 0

	await bot.send_message(message.from_user.id, "–ù–æ–º–µ—Ä...")
	await FSMPassword.input_number.set()

async def take_password_number(message : types.Message, state : FSMContext):

	async with state.proxy() as data:
		try:
			data['number'] = int(message.text)
		except:
			data['number'] = 1
			await bot.send_message(message.from_user.id, "–ü–∏—à–∏ —Ü–∏—Ñ—Ä—É, –¥—É—Ä–∞–∫. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–º–µ—Ä 1.")

	digits = '0123456789'
	lowercase_letters = 'abcdefghijklmnopqrstuvwxyz'
	uppercase_letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
	punctuation = '!#$%&*+-=?@^_.'
	chars = '0123456789abcdefghijklmnopqrstuvwxyz!#$%&*+-=?@^_.'

	lst = [digits, lowercase_letters, uppercase_letters, punctuation]
	seed(data['seed'])

	for pas_num in range(data['number']):
		symbols = 2
		result = []

		for i in lst:
			for _ in range(symbols):
				result.append(choice(i))

		for i in range(symbols):
			result += choice(chars)

		shuffle(result)
		if pas_num == (data['number'] - 1):
			await bot.send_message(message.from_user.id, ''.join(result), reply_markup=kb_client)
	await state.finish()






def register_handlers_client(dp : Dispatcher):
	dp.register_message_handler(commands_start, commands=['start', 'help'])

	dp.register_message_handler(find_recommendation, commands=['–ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å—Å—è'], state=None)
	dp.register_message_handler(make_a_recommendation, state=FSMSoviet.soviet)

	dp.register_message_handler(find_music_start, commands=['–ù–∞–π—Ç–∏_—Ç–µ–∫—Å—Ç_–ø–µ—Å–Ω–∏'], state=None)
	dp.register_message_handler(find_music_artist, state=FSMusic.artist)
	dp.register_message_handler(find_music_song, state=FSMusic.song)

	dp.register_message_handler(check_weather, commands=['–ü–æ–≥–æ–¥–∞'])

	dp.register_message_handler(take_password_start, commands=['–ü–∞—Ä–æ–ª—å'], state=None)
	dp.register_message_handler(take_password_seed, state=FSMPassword.input_seed)
	dp.register_message_handler(take_password_number, state=FSMPassword.input_number)
